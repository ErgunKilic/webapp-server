FROM ubuntu:yakkety
LABEL maintainer="Yoan Blanc <yoan@dosimple.ch>"

ARG DEBIAN_FRONTEND=noninteractive

ARG MYSQL_VERSION=5.7
ARG NODEJS_VERSION=7.x
ARG POSTGRES_VERSION=9.6
ARG TINI_VERSION=0.13.2

# Add Tini (reaping problem)
ADD https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini /tini
RUN sig=`sha256sum /tini | cut -d " " -f1` \
 && [ "$sig" = "790c9eb6e8a382fdcb1d451f77328f1fac122268fa6f735d2a9f1b1670ad74e3" ] \
 && chmod +x /tini \
 || exit 1
ENTRYPOINT ["/tini", "--"]

# All the packages.
RUN apt-get update -q \
 && apt-get upgrade -q -y \
 && apt-get install -q -y \
        acl \
        apt-transport-https \
        build-essential \
        ca-certificates \
        cron \
        curl \
        fontconfig \
        git \
        libcurl4-gnutls-dev \
        libmysqlclient-dev \
        libsass-dev \
        libsqlite3-dev \
        lsof \
        man \
        mysql-client-${MYSQL_VERSION} \
        nano \
        nginx \
        openssh-server \
        psmisc \
        python3-pip \
        python3-venv \
        pwgen \
        runit \
        sqlite3 \
        software-properties-common \
        ssmtp \
        sudo \
        syslog-ng \
        unzip \
        vim \
        wget \
 && apt-get autoremove -y \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

# NodeSource Apt Repository
# https://deb.nodesource.com/setup_7.x
RUN echo "deb https://deb.nodesource.com/node_${NODEJS_VERSION} yakkety main" \
  > /etc/apt/sources.list.d/nodesource.list
RUN wget --quiet -O - https://deb.nodesource.com/gpgkey/nodesource.gpg.key \
  | apt-key add -
# PostgreSQL Apt Repository
# https://www.postgresql.org/download/linux/ubuntu/
#
# (yakkety is not yet supported, so xenial)
RUN echo "deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main" \
  > /etc/apt/sources.list.d/pgdg.list
RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc \
  | apt-key add -
# Installation of external and “experimental” packages
RUN apt-get update \
 && apt-get install -q -y \
    libpq-dev \
    nodejs \
    postgresql-client-${POSTGRES_VERSION} \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*


# Locale
RUN for l in "fr_CH" "de_CH" "it_CH" "en_US"; \
      do locale-gen $l \
      && locale-gen $l.UTF-8; \
    done \
 && update-locale LANG=fr_CH.UTF-8 LC_MESSAGES=POSIX

# Python
RUN python3 -m pip install --no-cache-dir jinja2

## Nginx
ARG f=/etc/nginx/nginx.conf
RUN rm /etc/nginx/sites-enabled/default \
 && rm -r /var/www/html \
    # auto worker processes and no daemonize (for my_init.d)
 && sed -i 's/\(worker_processes\) .*;/\1 auto;\ndaemon off;/' $f \
    # logs to stdout
 && sed -i 's/\/var\/log\/nginx\/access.log/\/dev\/stdout/' $f \
 && sed -i 's/\/var\/log\/nginx\/error.log/\/dev\/stdout/' $f

# SSMTP
# mailhub configuration is done by setup.py
RUN sed -i 's/#FromLineOverride=YES/FromLineOverride=YES/' /etc/ssmtp/ssmtp.conf

# Cron
RUN sed -i 's/^\(SHELL=\)/MAILTO=""\n\1/' /etc/crontab

# OpenSSH Server
#
# * Disable password authentication
# * Disallow TCP forwarding
# * Delete any configured host keys (boot.sh)
#
ARG f=/etc/ssh/sshd_config
RUN mkdir /var/run/sshd \
 && sed -i 's/^#PasswordAuthentication yes/PasswordAuthentication no/' $f \
 && sed -i 's/^AllowTcpForwarding yes/AllowTcpForwarding no/' $f \
 && rm -v /etc/ssh/ssh_host_*

# Syslog
#
# * Output all the things to stdout!
#
ARG f=/etc/syslog-ng/syslog-ng.conf
RUN sed -i 's/system()/#system()/' $f \
 && sed -i 's/^\(# The root\)/# Stdout\/Stderr\n\n\1/' $f \
 && sed -i 's/^\(# The root\)/destination d_stdout { pipe("\/dev\/stdout"); };\n\1/' $f \
 && sed -i 's/^\(# The root\)/destination d_stderr { pipe("\/dev\/stderr"); };\n\n\1/' $f \
 && sed -i 's/\(destination\)(d_[^)]*)/\1(d_stdout)/g' $f \
 && sed -i 's/\(filter(f_console);\)\s*destination(d_stdout);/\1/g' $f

#
# SUDO for any user
#
RUN echo '%users ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers.d/users
RUN chmod 0440 /etc/sudoers.d/users

# Templates
COPY files/base /var/templates/base

## Runit
COPY runit/cron.sh /etc/service/cron/run
COPY runit/nginx.sh /etc/service/nginx/run
COPY runit/sshd.sh /etc/service/sshd/run
COPY runit/syslog.sh /etc/service/syslog/run
COPY scripts/boot.sh /usr/local/bin/boot.sh
COPY scripts/setup.py /usr/local/bin/setup.py
RUN chmod +x /etc/service/cron/run \
 && chmod +x /etc/service/nginx/run \
 && chmod +x /etc/service/sshd/run \
 && chmod +x /etc/service/syslog/run \
 && chmod o+x /usr/local/bin/boot.sh \
 && chmod o+x /usr/local/bin/setup.py

# Logrotate
COPY files/base/vhost.logrotate /etc/logrotate.d/

# Expose VOLUME
VOLUME /root/config \
    /var/www

# Ports
EXPOSE 22 80

# Set correct environment variables.
ENV HOME /root

# Config
ENV GROUPNAME unknown
ENV CONFIG Base

CMD [ "/usr/local/bin/boot.sh" ]

# vim: ft=dockerfile:
